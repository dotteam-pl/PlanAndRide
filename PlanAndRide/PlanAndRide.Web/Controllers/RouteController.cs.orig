<<<<<<< HEAD
﻿using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using PlanAndRide.BusinessLogic;
=======
﻿using Microsoft.AspNetCore.Mvc;
using PlanAndRide.BusinessLogic;
using PlanAndRide.Web.Models;


>>>>>>> main

namespace PlanAndRide.Web.Controllers
{
    public class RouteController : Controller
    {
        private readonly RouteRepository _routeRepository;
<<<<<<< HEAD

=======
>>>>>>> main
        public RouteController(RouteRepository routeRepository)
        {
            _routeRepository = routeRepository;
        }
        // GET: RouteController
        public ActionResult Index()
        {
<<<<<<< HEAD

            return View(_routeRepository.GetAll());
=======
            var model = new RouteViewsModel();
            model.Routes = _routeRepository.GetAll().Select(r => new RouteViewModel(r));
            return View(model);
>>>>>>> main
        }

        // GET: RouteController/Details/5
        public ActionResult Details(int id)
        {
            var route = _routeRepository.Get(id);
            if (route != null)
            {
<<<<<<< HEAD
                return View(route);
=======
                return View(new RouteViewModel(route));
>>>>>>> main
            }
            return RedirectToAction(nameof(Index));
        }

        // GET: RouteController/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: RouteController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
<<<<<<< HEAD
        public ActionResult Create(BusinessLogic.Route route)
        {
            ModelState.Remove("Reviews");
            if (!ModelState.IsValid)
            {
                return View(route);
            }
            _routeRepository.Add(route);
            return RedirectToAction(nameof(Index));
=======
        public ActionResult Create(RouteViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            _routeRepository.Add(model.Route);
            return RedirectToAction(nameof(Search), new {routeName=model.Name});
>>>>>>> main
        }

        // GET: RouteController/Edit/5
        public ActionResult Edit(int id)
        {
            var route = _routeRepository.Get(id);
            if (route != null)
            {
<<<<<<< HEAD
                return View(route);
=======
                return View(new RouteViewModel(route));
>>>>>>> main
            }
            return RedirectToAction(nameof(Index));
        }

        // POST: RouteController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
<<<<<<< HEAD
        public ActionResult Edit(int id, BusinessLogic.Route route)
        {
            ModelState.Remove("Reviews");
            if (!ModelState.IsValid)
            {
                return View(route);
            }
            try
            {
                _routeRepository.Update(id, route);
                return RedirectToAction(nameof(Index));
=======
        public ActionResult Edit(int id, RouteViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            try
            {
                _routeRepository.Update(id, model.Route);
                return RedirectToAction(nameof(Details), new { Id=id });
>>>>>>> main
            }
            catch
            {
                return View();
            }
        }

        // GET: RouteController/Delete/5
        public ActionResult Delete(int id)
        {
<<<<<<< HEAD
            var route= _routeRepository.Get(id);
            if (route != null)
            {
                return View(route);
=======
            var route = _routeRepository.Get(id);
            if (route != null)
            {
                return View(new RouteViewModel(route));
>>>>>>> main
            }
            return RedirectToAction(nameof(Index));
        }

        // POST: RouteController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
<<<<<<< HEAD
        public ActionResult Delete(int id, BusinessLogic.Route route)
=======
        public ActionResult Delete(int id, RouteViewModel model)
>>>>>>> main
        {
            _routeRepository.Delete(id);
            return RedirectToAction(nameof(Index));
        }
<<<<<<< HEAD
       
        }
    }

=======

        // GET: RouteController/Search
        public ActionResult Search(string routeName)
        {
            if (!string.IsNullOrEmpty(routeName))
            {
                var routes = _routeRepository.FindByName(routeName);
                var model = new RouteViewsModel();
                model.Routes = routes.Select(r => new RouteViewModel(r));
                model.RouteName = routeName;
                return View(nameof(Index), model);
            }
            return RedirectToAction(nameof(Index));

        }
    }
}
>>>>>>> main
